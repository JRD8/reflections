When would you want to use a remote repository rather than keeping all your work local?
Remote repositories are best for sharing code to multiple potential contributors.  Its
also useful to use a cloud based storage backup resource.  Also good for programming
while traveling so one can always have access to code no matter what/where computer
one is working on.


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You want to perhaps keep some changes private before "publishing" them to a public 
or shared respitory where other collaborators can both pull your code and make
further changes.  Also, you may way to test your code or keep different copies 
locally before committing to updating those same commits on the cloud backup.


Describe the differences between forks, clones, and branches. When would you use one instead of another?
Clones are making a direct copy of an existing repository - can happen either
locally or from github to a local machine.  Branches occur within a depository.
These are generally done locally and not directly on GitHub.  Forking is when 
you want to clone a 3rd prty repository and make changes for your own personal
use.


What is the benefit of having a copy of the last known state of the remote stored locally?
You can use that as a reference to auto-merge future states of the remote repository
during pull requests.  Need that information in order to handle all conflict
resolutions.  Also, you can work offline as needed and then push changes to the 
remote when finally accessable to internet.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I don't believe anything would be easier.  You'd have to save local versions and then
email or somehow transfer them to another working directory from a collaborator.
No version-control.  Loads of additional headaches.  Viva Git and GitHub!


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A separate branch is used for experimental and/or 3rd party development features
separate from the existing master branch, which is working production code.  The
new branch(s) may not yet be bug-free and may still have experimental features from
collaborators not yet approved by the project supervisor.  Much easier to use
separate branches, rather than working all these various features/options/debugging
on the master branch.


